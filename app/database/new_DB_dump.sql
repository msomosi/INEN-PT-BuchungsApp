--
-- PostgreSQL database dump
--

-- Dumped from database version 16.4 (Ubuntu 16.4-0ubuntu0.24.04.2)
-- Dumped by pg_dump version 16.4 (Ubuntu 16.4-0ubuntu0.24.04.2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';
SET default_table_access_method = heap;

--
-- Name: role; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.role (
    role_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    role_name VARCHAR(50)
);

ALTER TABLE public.role OWNER TO ubuntu;

--
-- Name: contact; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.contact (
    kontakt_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    address VARCHAR(50),
    postal_code NUMERIC(4,0),
    location VARCHAR(50),
    phone VARCHAR(20)
);

ALTER TABLE public.contact OWNER TO ubuntu;

--
-- Name: university; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.university (
    university_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    university_name VARCHAR(50),
    contact_id INTEGER NOT NULL
);

ALTER TABLE public.university OWNER TO ubuntu;

--
-- Name: accommodation; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.accommodation (
    provider_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    contact_id INTEGER NOT NULL,
    company_name VARCHAR(50),
    parking BOOLEAN,
    parking_free BOOLEAN,
    free_notice VARCHAR(500)
);

ALTER TABLE public.accommodation OWNER TO ubuntu;

--
-- Name: user; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public."user" (
    user_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    role_id INTEGER NOT NULL,
    provider_id INTEGER NOT NULL,
    verification BOOLEAN,
    verification_date DATE,
    email VARCHAR(50),
    oauth_token VARCHAR(100),
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);

ALTER TABLE public."user" OWNER TO ubuntu;

--
-- Name: student; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.student (
    user_id INTEGER PRIMARY KEY,
    contact_id INTEGER NOT NULL,
    student_number VARCHAR(20),
    university_id INTEGER NOT NULL,
    enrollment_end DATE
);

ALTER TABLE public.student OWNER TO ubuntu;

--
-- Name: room; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.room (
    room_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL,
    date_from DATE,
    date_to DATE,
    state_id INTEGER NOT NULL DEFAULT 1
);

ALTER TABLE public.room OWNER TO ubuntu;

--
-- Name: booking; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.booking (
    booking_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL,
    room_id INTEGER NOT NULL,
    date_from DATE,
    date_to DATE,
    state_id INTEGER NOT NULL
);

ALTER TABLE public.booking OWNER TO ubuntu;

--
-- Name: booking_state; Type: TABLE; Schema: public; Owner: ubuntu
--

CREATE TABLE public.booking_state (
    state_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    state_name VARCHAR(25)
);

ALTER TABLE public.booking_state OWNER TO ubuntu;

--
-- Name: accommodation fk_accommodation_contact; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.accommodation
    ADD CONSTRAINT fk_accommodation_contact FOREIGN KEY (contact_id) REFERENCES public.contact(kontakt_id);

--
-- Name: user fk_user_role; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT fk_user_role FOREIGN KEY (role_id) REFERENCES public.role(role_id);

--
-- Name: user fk_user_provider; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT fk_user_provider FOREIGN KEY (provider_id) REFERENCES public.accommodation(provider_id);

--
-- Name: university fk_university_contact; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.university
    ADD CONSTRAINT fk_university_contact FOREIGN KEY (contact_id) REFERENCES public.contact(kontakt_id);

--
-- Name: student fk_student_user; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.student
    ADD CONSTRAINT fk_student_user FOREIGN KEY (user_id) REFERENCES public."user"(user_id);

--
-- Name: student fk_student_contact; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.student
    ADD CONSTRAINT fk_student_contact FOREIGN KEY (contact_id) REFERENCES public.contact(kontakt_id);

--
-- Name: student fk_student_university; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.student
    ADD CONSTRAINT fk_student_university FOREIGN KEY (university_id) REFERENCES public.university(university_id);

--
-- Name: room fk_room_user; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.room
    ADD CONSTRAINT fk_room_user FOREIGN KEY (user_id) REFERENCES public."user"(user_id);

--
-- Name: room fk_room_state; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.room
    ADD CONSTRAINT fk_room_state FOREIGN KEY (state_id) REFERENCES public.booking_state(state_id);

--
-- Name: booking fk_booking_user; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.booking
    ADD CONSTRAINT fk_booking_user FOREIGN KEY (user_id) REFERENCES public."user"(user_id);

--
-- Name: booking fk_booking_room; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.booking
    ADD CONSTRAINT fk_booking_room FOREIGN KEY (room_id) REFERENCES public.room(room_id);

--
-- Name: booking fk_booking_state; Type: FK CONSTRAINT; Schema: public; Owner: ubuntu
--

ALTER TABLE ONLY public.booking
    ADD CONSTRAINT fk_booking_state FOREIGN KEY (state_id) REFERENCES public.booking_state(state_id);

--
-- Data for Name: booking_state; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public.booking_state (state_id, state_name) FROM stdin;
1	available
2	pending
3	confirmed
4	completed
5	failed
\.

--
-- Data for Name: contact; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public.contact (kontakt_id, address, postal_code, location, phone) FROM stdin;
1	Campus 2	7000	Eisenstadt	0126485682
2	Rechbauerstra√üe 12	8010	Graz	06642158713365
\.

--
-- Data for Name: accommodation; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public.accommodation (provider_id, contact_id, company_name, parking, parking_free, free_notice) FROM stdin;
1	1	OEJAB Eisenstadt	true	true	
2	2	Hotel A	false	false	
\.

--
-- Data for Name: role; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public.role (role_id, role_name) FROM stdin;
1	admin
2	provider
3	student
\.

--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public."user" (user_id, role_id, provider_id, verification, verification_date, email, first_name, last_name) FROM stdin;
1	2	1	true	2024-11-20	oejab_eisenstadt	Franz	Hilber
2	2	2	true	2024-11-20	hotela	Igraine	OhneZahn
3	3	1	true	2024-11-20	tbaier	Tatjana	Baier
\.

--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: ubuntu
--
COPY public.student (user_id, contact_id, student_number, university_id, enrollment_end) FROM stdin;
3	3	2024001	1	2025-09-30
\.

--
-- Data for Name: room; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public.room (room_id, user_id, date_from, date_to, state_id) FROM stdin;
2	1	2024-11-25	1
4	1	2024-11-26	1
5	1	2024-11-27	1
7	1	2024-11-29	1
8	1	2024-11-30	1
6	1	2024-11-27	2
9	1	2024-12-23	1
10	1	2025-01-06	1
11	1	2025-01-06	1
13	1	2025-01-07	1
14	1	2025-01-20	1
15	1	2025-01-21	1
16	1	2025-01-22	1
17	1	2025-01-23	1
18	1	2025-01-24	1
19	2	2025-02-03	1
20	2	2025-02-04	1
21	2	2025-02-05	1
1	1	2024-11-25	2
3	1	2024-11-26	2
12	1	2025-01-07	2
23	1	2024-11-21	1
24	1	2024-11-22	1
25	1	2024-11-22	1
26	1	2025-02-03	2
27	1	2024-11-29	1
28	1	2024-11-30	1
22	1	2024-11-21	2
29	2	2024-11-25	1
\.

--
-- Data for Name: booking; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public.booking (booking_id, user_id, room_id, date_from, date_to, state_id) FROM stdin;
1	3	1	2024-11-25	2024-12-25	3
2	3	3	2024-11-26	2024-12-26	2
\.

--
-- Data for Name: university; Type: TABLE DATA; Schema: public; Owner: ubuntu
--

COPY public.university (university_id, university_name, contact_id) FROM stdin;
1	FH Burgenland	1
2	TU Graz	2
3	University of Vienna	3
\.

--
-- Name: role_role_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ubuntu
--

SELECT pg_catalog.setval('public.role_role_id_seq', 3, true);

--
-- Name: contact_kontakt_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ubuntu
--

SELECT pg_catalog.setval('public.contact_kontakt_id_seq', 2, true);

--
-- Name: accommodation_provider_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ubuntu
--

SELECT pg_catalog.setval('public.accommodation_provider_id_seq', 2, true);

--
-- Name: user_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ubuntu
--

SELECT pg_catalog.setval('public.user_user_id_seq', 3, true);

--
-- Name: room_room_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ubuntu
--

SELECT pg_catalog.setval('public.room_room_id_seq', 3, true);

--
-- Name: booking_booking_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ubuntu
--

SELECT pg_catalog.setval('public.booking_booking_id_seq', 2, true);

--
-- Name: booking_state_state_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ubuntu
--

SELECT pg_catalog.setval('public.booking_state_state_id_seq', 5, true);

--
-- PostgreSQL database dump complete
--
